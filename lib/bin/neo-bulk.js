'use strict';

const NeoMesh = require('@cityofzion/neo-js/dist/node/mesh');
const NeoNode = require('@cityofzion/neo-js/dist/node/node');
const { shuffle } = require('lodash');
const profiles = require('@cityofzion/neo-js/dist/common/profiles');
const pRetry = require('p-retry');

const { sites } = require('../rover/neo/mesh.json');

process.on('unhandledRejection', e => {
  process.stdout.write(`\nERROR: ${e.toString()}`);
});

const localMesh = sites.reduce((all, site) => {
  if (site.type === 'RPC') {
    if (site.protocol === 'https' || site.protocol === 'http') {
      let port = 80;
      let address = false;
      if (site.port !== undefined) {
        port = Number(site.port);
      } else if (site.protocol === 'https') {
        port = 443;
      } else if (site.url !== undefined && site.url.indexOf('https') > -1) {
        port = 443;
      }
      // determine key availability. Accolade to @davidthamwf.
      if (site.address !== undefined) {
        address = site.address;
      } else if (site.url !== undefined) {
        address = site.url;
      }

      if (address.indexOf('http') < 0 && port !== 443) {
        address = 'http://' + address;
      } else if (address.indexOf('https') < 0 && port === 443) {
        address = 'https://' + address;
      }

      if (address !== false) {
        const obj = {
          domain: address,
          port: port
        };
        all.push(obj);
      }
    }
  }
  return all;
}, []);
const networkConfig = profiles.rpc.testnet;
const heights = [3401701, 3401735, 3401769, 3401803, 3401837, 3401871, 3401905, 3401939, 3401973, 3402007, 3402041, 3402075, 3402109, 3402143, 3402177, 3402211, 3402245, 3402279, 3402313, 3402347, 3402381, 3402415, 3402449, 3402483, 3402517, 3402551, 3402585, 3402619, 3402653, 3402687, 3402721, 3402755, 3402789, 3402823, 3402857, 3402891, 3402925, 3402959, 3402993, 3403027, 3403061, 3403095, 3403129, 3403163, 3403197, 3403231, 3403265, 3403299, 3403333, 3403367, 3403401, 3403435, 3403469, 3403503, 3403537, 3403571, 3403605, 3403639, 3403673, 3403707, 3403741, 3403775, 3403809, 3403843, 3403877, 3403911, 3403945, 3403979, 3404013, 3404047, 3404081, 3404115, 3404149, 3404183, 3404217, 3404251, 3404285, 3404319, 3404353, 3404387, 3404421, 3404455, 3404489, 3404523, 3404557, 3404591, 3404625, 3404659, 3404693, 3404727, 3404761, 3404795, 3404829, 3404863, 3404897, 3404931, 3404965, 3404999, 3405033, 3405067, 3405101, 3405135, 3405169, 3405203, 3405237, 3405271, 3405305, 3405339, 3405373, 3405407, 3405441, 3405475, 3405509, 3405543, 3405577, 3405611, 3405645, 3405679, 3405713, 3405747, 3405781, 3405815, 3405849, 3405883, 3405917, 3405951, 3405985, 3406019, 3406053, 3406087, 3406121, 3406155, 3406189, 3406223, 3406257, 3406291, 3406325, 3406359, 3406393, 3406427, 3406461, 3406495, 3406529, 3406563, 3406597, 3406631, 3406665, 3406699, 3406733, 3406767, 3406801, 3406835, 3406869, 3406903, 3406937, 3406971, 3407005, 3407039, 3407073, 3407107, 3407141, 3407175, 3407209, 3407243, 3407277, 3407311, 3407345, 3407379, 3407413, 3407447, 3407481, 3407515, 3407549, 3407583, 3407617, 3407651, 3407685, 3407719, 3407753, 3407787, 3407821, 3407855, 3407889, 3407923, 3407957, 3407991, 3408025, 3408059, 3408093, 3408127, 3408161, 3408195, 3408229, 3408263, 3408297, 3408331, 3408365, 3408399, 3408433, 3408467, 3408501, 3408535, 3408569, 3408603, 3408637, 3408671, 3408705, 3408739, 3408773, 3408807, 3408841, 3408875, 3408909, 3408943, 3408977, 3409011, 3409045, 3409079, 3409113, 3409147, 3409181, 3409215, 3409249, 3409283, 3409317, 3409351, 3409385, 3409419, 3409453, 3409487, 3409521, 3409555, 3409589, 3409623, 3409657, 3409691, 3409725, 3409759, 3409793, 3409827, 3409861, 3409895, 3409929, 3409963, 3409997, 3410031, 3410065, 3410099, 3410133, 3410167, 3410201, 3410235, 3410269, 3410303, 3410337, 3410371, 3410405, 3410439, 3410473, 3410507, 3410541, 3410575, 3410609, 3410643, 3410677, 3410711, 3410745, 3410779, 3410813, 3410847, 3410881, 3410915, 3410949, 3410983, 3411017, 3411051, 3411085, 3411119, 3411153, 3411187, 3411221, 3411255, 3411289, 3411323, 3411357, 3411391, 3411425, 3411459, 3411493, 3411527, 3411561, 3411595, 3411629, 3411663, 3411697, 3411731, 3411765, 3411799, 3411833, 3411867, 3411901, 3411935, 3411969, 3412003, 3412037, 3412071, 3412105, 3412139, 3412173, 3412207, 3412241, 3412275, 3412309, 3412343, 3412377, 3412411, 3412445, 3412479, 3412513, 3412547, 3412581, 3412615, 3412649, 3412683, 3412717, 3412751, 3412785, 3412819, 3412853, 3412887, 3412921, 3412955, 3412989, 3413023, 3413057, 3413091, 3413125, 3413159, 3413193, 3413227, 3413261, 3413295, 3413329, 3413363, 3413397, 3413431, 3413465, 3413499, 3413533, 3413567, 3413601, 3413635, 3413669, 3413703, 3413737, 3413771, 3413805, 3413839, 3413873, 3413907, 3413941, 3413975, 3414009, 3414043, 3414077, 3414111, 3414145, 3414179, 3414213, 3414247, 3414281, 3414315, 3414349, 3414383, 3414417, 3414451, 3414485, 3414519, 3414553, 3414587, 3414621, 3414655, 3414689, 3414723, 3414757, 3414791, 3414825, 3414859, 3414893, 3414927, 3414961, 3414995, 3415029, 3415063, 3415097, 3415131, 3415165, 3415199, 3415233, 3415267, 3415301, 3415335, 3415369, 3415403, 3415437, 3415471, 3415505, 3415539, 3415573, 3415607, 3415641, 3415675, 3415709, 3415743, 3415777, 3415811, 3415845, 3415879, 3415913, 3415947, 3415981, 3416015, 3416049, 3416083, 3416117, 3416151, 3416185, 3416219, 3416253, 3416287, 3416321, 3416355, 3416389, 3416423, 3416457, 3416491, 3416525, 3416559, 3416593, 3416627, 3416661, 3416695, 3416729, 3416763, 3416797, 3416831, 3416865, 3416899, 3416933, 3416967, 3417001, 3417035, 3417069, 3417103, 3417137, 3417171, 3417205, 3417239, 3417273, 3417307, 3417341, 3417375, 3417409, 3417443, 3417477, 3417511, 3417545, 3417579, 3417613, 3417647, 3417681, 3417715, 3417749, 3417783, 3417817, 3417851, 3417885, 3417919, 3417953, 3417987, 3418021, 3418055, 3418089, 3418123, 3418157, 3418191, 3418225, 3418259, 3418293, 3418327, 3418361, 3418395, 3418429, 3418463, 3418497, 3418531, 3418565, 3418599, 3418633, 3418667, 3418701, 3418735, 3418769, 3418803, 3418837, 3418871, 3418905, 3418939, 3418973];
const neoMesh = new NeoMesh(shuffle(networkConfig.endpoints.concat(localMesh)).map(endpoint => {
  return new NeoNode({
    domain: endpoint.domain,
    port: endpoint.port,
    timeout: 2e3 // 2s
  });
}));

let count = heights.length;

for (let h of heights) {
  pRetry(() => {
    return neoMesh.getRandomNode().rpc.getBlock(h);
  }, { onFailedAttempt: error => {
      process.stdout.write(`\nBlock ${h} attempt ${error.attemptNumber} failed. There are ${error.retriesLeft} retries left.`);
    },
    retries: 50,
    factor: 1.1,
    randomize: true,
    maxTimeout: 2e3 }).then(b => process.stdout.write(`\nGot block ${b.index}, remaining ${--count}`)).catch(e => e);
}