'use strict';

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bc.BcBlock', null, global);
goog.exportSymbol('proto.bc.Block', null, global);
goog.exportSymbol('proto.bc.BlockchainHeader', null, global);
goog.exportSymbol('proto.bc.BlockchainHeaders', null, global);
goog.exportSymbol('proto.bc.MarkedTransaction', null, global);
goog.exportSymbol('proto.bc.Null', null, global);
goog.exportSymbol('proto.bc.OutPoint', null, global);
goog.exportSymbol('proto.bc.Transaction', null, global);
goog.exportSymbol('proto.bc.TransactionInput', null, global);
goog.exportSymbol('proto.bc.TransactionOutput', null, global);
goog.exportSymbol('proto.bc.UnspentTransactions', null, global);
goog.exportSymbol('proto.bc.Utxo', null, global);
goog.exportSymbol('proto.bc.WalletData', null, global);
goog.exportSymbol('proto.bc.WalletOutPoint', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.Null = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.Null, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.Null.displayName = 'proto.bc.Null';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.Null.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.Null.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.Null} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.Null.toObject = function (includeInstance, msg) {
    var f,
        obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.Null}
 */
proto.bc.Null.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.Null();
  return proto.bc.Null.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.Null} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.Null}
 */
proto.bc.Null.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.Null.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.Null.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.Null} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.Null.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.Block = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.Block.repeatedFields_, null);
};
goog.inherits(proto.bc.Block, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.Block.displayName = 'proto.bc.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.Block.repeatedFields_ = [8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.Block.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.Block.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.Block} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.Block.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
      hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      previousHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
      timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
      height: jspb.Message.getFieldWithDefault(msg, 5, 0),
      merkleRoot: jspb.Message.getFieldWithDefault(msg, 6, ""),
      markedTxCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
      markedTxsList: jspb.Message.toObjectList(msg.getMarkedTxsList(), proto.bc.MarkedTransaction.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.Block}
 */
proto.bc.Block.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.Block();
  return proto.bc.Block.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.Block}
 */
proto.bc.Block.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setBlockchain(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setPreviousHash(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setTimestamp(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readUint64();
        msg.setHeight(value);
        break;
      case 6:
        var value = /** @type {string} */reader.readString();
        msg.setMerkleRoot(value);
        break;
      case 7:
        var value = /** @type {number} */reader.readUint64();
        msg.setMarkedTxCount(value);
        break;
      case 8:
        var value = new proto.bc.MarkedTransaction();
        reader.readMessage(value, proto.bc.MarkedTransaction.deserializeBinaryFromReader);
        msg.addMarkedTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.Block.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.Block.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getMarkedTxCount();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getMarkedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(8, f, proto.bc.MarkedTransaction.serializeBinaryToWriter);
  }
};

/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.Block.prototype.getBlockchain = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/** @param {string} value */
proto.bc.Block.prototype.setBlockchain = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.Block.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.Block.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string previous_hash = 3;
 * @return {string}
 */
proto.bc.Block.prototype.getPreviousHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.Block.prototype.setPreviousHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.bc.Block.prototype.getTimestamp = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/** @param {number} value */
proto.bc.Block.prototype.setTimestamp = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.Block.prototype.getHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};

/** @param {number} value */
proto.bc.Block.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string merkle_root = 6;
 * @return {string}
 */
proto.bc.Block.prototype.getMerkleRoot = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "")
  );
};

/** @param {string} value */
proto.bc.Block.prototype.setMerkleRoot = function (value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional uint64 marked_tx_count = 7;
 * @return {number}
 */
proto.bc.Block.prototype.getMarkedTxCount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};

/** @param {number} value */
proto.bc.Block.prototype.setMarkedTxCount = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * repeated MarkedTransaction marked_txs = 8;
 * @return {!Array<!proto.bc.MarkedTransaction>}
 */
proto.bc.Block.prototype.getMarkedTxsList = function () {
  return (/** @type{!Array<!proto.bc.MarkedTransaction>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.MarkedTransaction, 8)
  );
};

/** @param {!Array<!proto.bc.MarkedTransaction>} value */
proto.bc.Block.prototype.setMarkedTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.bc.MarkedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.MarkedTransaction}
 */
proto.bc.Block.prototype.addMarkedTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.MarkedTransaction, opt_index);
};

proto.bc.Block.prototype.clearMarkedTxsList = function () {
  this.setMarkedTxsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.MarkedTransaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.MarkedTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.MarkedTransaction.displayName = 'proto.bc.MarkedTransaction';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.MarkedTransaction.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.MarkedTransaction.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.MarkedTransaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.MarkedTransaction.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      value: msg.getValue_asB64(),
      hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      id: jspb.Message.getFieldWithDefault(msg, 3, ""),
      token: jspb.Message.getFieldWithDefault(msg, 4, ""),
      addrFrom: jspb.Message.getFieldWithDefault(msg, 5, ""),
      addrTo: jspb.Message.getFieldWithDefault(msg, 6, ""),
      blockHeight: jspb.Message.getFieldWithDefault(msg, 7, 0),
      index: jspb.Message.getFieldWithDefault(msg, 8, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.MarkedTransaction}
 */
proto.bc.MarkedTransaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.MarkedTransaction();
  return proto.bc.MarkedTransaction.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.MarkedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.MarkedTransaction}
 */
proto.bc.MarkedTransaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setValue(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setId(value);
        break;
      case 4:
        var value = /** @type {string} */reader.readString();
        msg.setToken(value);
        break;
      case 5:
        var value = /** @type {string} */reader.readString();
        msg.setAddrFrom(value);
        break;
      case 6:
        var value = /** @type {string} */reader.readString();
        msg.setAddrTo(value);
        break;
      case 7:
        var value = /** @type {number} */reader.readUint64();
        msg.setBlockHeight(value);
        break;
      case 8:
        var value = /** @type {number} */reader.readUint64();
        msg.setIndex(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.MarkedTransaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.MarkedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.MarkedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.MarkedTransaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getAddrFrom();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getAddrTo();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
};

/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.MarkedTransaction.prototype.getValue = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.MarkedTransaction.prototype.getValue_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getValue())
  );
};

/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.MarkedTransaction.prototype.getValue_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getValue())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.MarkedTransaction.prototype.setValue = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.MarkedTransaction.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.MarkedTransaction.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string id = 3;
 * @return {string}
 */
proto.bc.MarkedTransaction.prototype.getId = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.MarkedTransaction.prototype.setId = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string token = 4;
 * @return {string}
 */
proto.bc.MarkedTransaction.prototype.getToken = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/** @param {string} value */
proto.bc.MarkedTransaction.prototype.setToken = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string addr_from = 5;
 * @return {string}
 */
proto.bc.MarkedTransaction.prototype.getAddrFrom = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "")
  );
};

/** @param {string} value */
proto.bc.MarkedTransaction.prototype.setAddrFrom = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string addr_to = 6;
 * @return {string}
 */
proto.bc.MarkedTransaction.prototype.getAddrTo = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "")
  );
};

/** @param {string} value */
proto.bc.MarkedTransaction.prototype.setAddrTo = function (value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional uint64 block_height = 7;
 * @return {number}
 */
proto.bc.MarkedTransaction.prototype.getBlockHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};

/** @param {number} value */
proto.bc.MarkedTransaction.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional uint64 index = 8;
 * @return {number}
 */
proto.bc.MarkedTransaction.prototype.getIndex = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};

/** @param {number} value */
proto.bc.MarkedTransaction.prototype.setIndex = function (value) {
  jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.BlockchainHeaders = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.BlockchainHeaders.repeatedFields_, null);
};
goog.inherits(proto.bc.BlockchainHeaders, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.BlockchainHeaders.displayName = 'proto.bc.BlockchainHeaders';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.BlockchainHeaders.repeatedFields_ = [1, 2, 3, 4, 5];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.BlockchainHeaders.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.BlockchainHeaders.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.BlockchainHeaders} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.BlockchainHeaders.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      btcList: jspb.Message.toObjectList(msg.getBtcList(), proto.bc.BlockchainHeader.toObject, includeInstance),
      ethList: jspb.Message.toObjectList(msg.getEthList(), proto.bc.BlockchainHeader.toObject, includeInstance),
      lskList: jspb.Message.toObjectList(msg.getLskList(), proto.bc.BlockchainHeader.toObject, includeInstance),
      neoList: jspb.Message.toObjectList(msg.getNeoList(), proto.bc.BlockchainHeader.toObject, includeInstance),
      wavList: jspb.Message.toObjectList(msg.getWavList(), proto.bc.BlockchainHeader.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.BlockchainHeaders}
 */
proto.bc.BlockchainHeaders.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.BlockchainHeaders();
  return proto.bc.BlockchainHeaders.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.BlockchainHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.BlockchainHeaders}
 */
proto.bc.BlockchainHeaders.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.bc.BlockchainHeader();
        reader.readMessage(value, proto.bc.BlockchainHeader.deserializeBinaryFromReader);
        msg.addBtc(value);
        break;
      case 2:
        var value = new proto.bc.BlockchainHeader();
        reader.readMessage(value, proto.bc.BlockchainHeader.deserializeBinaryFromReader);
        msg.addEth(value);
        break;
      case 3:
        var value = new proto.bc.BlockchainHeader();
        reader.readMessage(value, proto.bc.BlockchainHeader.deserializeBinaryFromReader);
        msg.addLsk(value);
        break;
      case 4:
        var value = new proto.bc.BlockchainHeader();
        reader.readMessage(value, proto.bc.BlockchainHeader.deserializeBinaryFromReader);
        msg.addNeo(value);
        break;
      case 5:
        var value = new proto.bc.BlockchainHeader();
        reader.readMessage(value, proto.bc.BlockchainHeader.deserializeBinaryFromReader);
        msg.addWav(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.BlockchainHeaders.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.BlockchainHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.BlockchainHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.BlockchainHeaders.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBtcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.bc.BlockchainHeader.serializeBinaryToWriter);
  }
  f = message.getEthList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.bc.BlockchainHeader.serializeBinaryToWriter);
  }
  f = message.getLskList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.bc.BlockchainHeader.serializeBinaryToWriter);
  }
  f = message.getNeoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.bc.BlockchainHeader.serializeBinaryToWriter);
  }
  f = message.getWavList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, proto.bc.BlockchainHeader.serializeBinaryToWriter);
  }
};

/**
 * repeated BlockchainHeader btc = 1;
 * @return {!Array<!proto.bc.BlockchainHeader>}
 */
proto.bc.BlockchainHeaders.prototype.getBtcList = function () {
  return (/** @type{!Array<!proto.bc.BlockchainHeader>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.BlockchainHeader, 1)
  );
};

/** @param {!Array<!proto.bc.BlockchainHeader>} value */
proto.bc.BlockchainHeaders.prototype.setBtcList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.bc.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.BlockchainHeader}
 */
proto.bc.BlockchainHeaders.prototype.addBtc = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.BlockchainHeader, opt_index);
};

proto.bc.BlockchainHeaders.prototype.clearBtcList = function () {
  this.setBtcList([]);
};

/**
 * repeated BlockchainHeader eth = 2;
 * @return {!Array<!proto.bc.BlockchainHeader>}
 */
proto.bc.BlockchainHeaders.prototype.getEthList = function () {
  return (/** @type{!Array<!proto.bc.BlockchainHeader>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.BlockchainHeader, 2)
  );
};

/** @param {!Array<!proto.bc.BlockchainHeader>} value */
proto.bc.BlockchainHeaders.prototype.setEthList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.bc.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.BlockchainHeader}
 */
proto.bc.BlockchainHeaders.prototype.addEth = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bc.BlockchainHeader, opt_index);
};

proto.bc.BlockchainHeaders.prototype.clearEthList = function () {
  this.setEthList([]);
};

/**
 * repeated BlockchainHeader lsk = 3;
 * @return {!Array<!proto.bc.BlockchainHeader>}
 */
proto.bc.BlockchainHeaders.prototype.getLskList = function () {
  return (/** @type{!Array<!proto.bc.BlockchainHeader>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.BlockchainHeader, 3)
  );
};

/** @param {!Array<!proto.bc.BlockchainHeader>} value */
proto.bc.BlockchainHeaders.prototype.setLskList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.bc.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.BlockchainHeader}
 */
proto.bc.BlockchainHeaders.prototype.addLsk = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bc.BlockchainHeader, opt_index);
};

proto.bc.BlockchainHeaders.prototype.clearLskList = function () {
  this.setLskList([]);
};

/**
 * repeated BlockchainHeader neo = 4;
 * @return {!Array<!proto.bc.BlockchainHeader>}
 */
proto.bc.BlockchainHeaders.prototype.getNeoList = function () {
  return (/** @type{!Array<!proto.bc.BlockchainHeader>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.BlockchainHeader, 4)
  );
};

/** @param {!Array<!proto.bc.BlockchainHeader>} value */
proto.bc.BlockchainHeaders.prototype.setNeoList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.bc.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.BlockchainHeader}
 */
proto.bc.BlockchainHeaders.prototype.addNeo = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bc.BlockchainHeader, opt_index);
};

proto.bc.BlockchainHeaders.prototype.clearNeoList = function () {
  this.setNeoList([]);
};

/**
 * repeated BlockchainHeader wav = 5;
 * @return {!Array<!proto.bc.BlockchainHeader>}
 */
proto.bc.BlockchainHeaders.prototype.getWavList = function () {
  return (/** @type{!Array<!proto.bc.BlockchainHeader>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.BlockchainHeader, 5)
  );
};

/** @param {!Array<!proto.bc.BlockchainHeader>} value */
proto.bc.BlockchainHeaders.prototype.setWavList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.bc.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.BlockchainHeader}
 */
proto.bc.BlockchainHeaders.prototype.addWav = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bc.BlockchainHeader, opt_index);
};

proto.bc.BlockchainHeaders.prototype.clearWavList = function () {
  this.setWavList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.BcBlock = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.BcBlock.repeatedFields_, null);
};
goog.inherits(proto.bc.BcBlock, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.BcBlock.displayName = 'proto.bc.BcBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.BcBlock.repeatedFields_ = [16, 21];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.BcBlock.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.BcBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.BcBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.BcBlock.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
      previousHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      version: jspb.Message.getFieldWithDefault(msg, 3, 0),
      schemaVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
      height: jspb.Message.getFieldWithDefault(msg, 5, 0),
      miner: jspb.Message.getFieldWithDefault(msg, 6, ""),
      difficulty: jspb.Message.getFieldWithDefault(msg, 7, ""),
      timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
      merkleRoot: jspb.Message.getFieldWithDefault(msg, 9, ""),
      chainRoot: jspb.Message.getFieldWithDefault(msg, 10, ""),
      distance: jspb.Message.getFieldWithDefault(msg, 11, ""),
      totalDistance: jspb.Message.getFieldWithDefault(msg, 12, ""),
      nonce: jspb.Message.getFieldWithDefault(msg, 13, ""),
      nrgGrant: jspb.Message.getFieldWithDefault(msg, 14, 0),
      twn: jspb.Message.getFieldWithDefault(msg, 15, 0),
      twsList: jspb.Message.getRepeatedField(msg, 16),
      emblemWeight: jspb.Message.getFieldWithDefault(msg, 17, 0),
      emblemChainFingerprintRoot: jspb.Message.getFieldWithDefault(msg, 18, ""),
      emblemChainAddress: jspb.Message.getFieldWithDefault(msg, 19, ""),
      txCount: jspb.Message.getFieldWithDefault(msg, 20, 0),
      txsList: jspb.Message.toObjectList(msg.getTxsList(), proto.bc.Transaction.toObject, includeInstance),
      txFeeBase: jspb.Message.getFieldWithDefault(msg, 22, 0),
      txDistanceSumLimit: jspb.Message.getFieldWithDefault(msg, 23, 0),
      blockchainHeadersCount: jspb.Message.getFieldWithDefault(msg, 24, 0),
      blockchainHeaders: (f = msg.getBlockchainHeaders()) && proto.bc.BlockchainHeaders.toObject(includeInstance, f),
      blockchainFingerprintsRoot: jspb.Message.getFieldWithDefault(msg, 26, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.BcBlock}
 */
proto.bc.BcBlock.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.BcBlock();
  return proto.bc.BcBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.BcBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.BcBlock}
 */
proto.bc.BcBlock.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setPreviousHash(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint64();
        msg.setVersion(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setSchemaVersion(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readUint64();
        msg.setHeight(value);
        break;
      case 6:
        var value = /** @type {string} */reader.readString();
        msg.setMiner(value);
        break;
      case 7:
        var value = /** @type {string} */reader.readString();
        msg.setDifficulty(value);
        break;
      case 8:
        var value = /** @type {number} */reader.readUint64();
        msg.setTimestamp(value);
        break;
      case 9:
        var value = /** @type {string} */reader.readString();
        msg.setMerkleRoot(value);
        break;
      case 10:
        var value = /** @type {string} */reader.readString();
        msg.setChainRoot(value);
        break;
      case 11:
        var value = /** @type {string} */reader.readString();
        msg.setDistance(value);
        break;
      case 12:
        var value = /** @type {string} */reader.readString();
        msg.setTotalDistance(value);
        break;
      case 13:
        var value = /** @type {string} */reader.readString();
        msg.setNonce(value);
        break;
      case 14:
        var value = /** @type {number} */reader.readUint64();
        msg.setNrgGrant(value);
        break;
      case 15:
        var value = /** @type {number} */reader.readUint64();
        msg.setTwn(value);
        break;
      case 16:
        var value = /** @type {string} */reader.readString();
        msg.addTws(value);
        break;
      case 17:
        var value = /** @type {number} */reader.readUint64();
        msg.setEmblemWeight(value);
        break;
      case 18:
        var value = /** @type {string} */reader.readString();
        msg.setEmblemChainFingerprintRoot(value);
        break;
      case 19:
        var value = /** @type {string} */reader.readString();
        msg.setEmblemChainAddress(value);
        break;
      case 20:
        var value = /** @type {number} */reader.readUint64();
        msg.setTxCount(value);
        break;
      case 21:
        var value = new proto.bc.Transaction();
        reader.readMessage(value, proto.bc.Transaction.deserializeBinaryFromReader);
        msg.addTxs(value);
        break;
      case 22:
        var value = /** @type {number} */reader.readUint64();
        msg.setTxFeeBase(value);
        break;
      case 23:
        var value = /** @type {number} */reader.readUint64();
        msg.setTxDistanceSumLimit(value);
        break;
      case 24:
        var value = /** @type {number} */reader.readUint64();
        msg.setBlockchainHeadersCount(value);
        break;
      case 25:
        var value = new proto.bc.BlockchainHeaders();
        reader.readMessage(value, proto.bc.BlockchainHeaders.deserializeBinaryFromReader);
        msg.setBlockchainHeaders(value);
        break;
      case 26:
        var value = /** @type {string} */reader.readString();
        msg.setBlockchainFingerprintsRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.BcBlock.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.BcBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.BcBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.BcBlock.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getSchemaVersion();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getChainRoot();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getDistance();
  if (f.length > 0) {
    writer.writeString(11, f);
  }
  f = message.getTotalDistance();
  if (f.length > 0) {
    writer.writeString(12, f);
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
  f = message.getNrgGrant();
  if (f !== 0) {
    writer.writeUint64(14, f);
  }
  f = message.getTwn();
  if (f !== 0) {
    writer.writeUint64(15, f);
  }
  f = message.getTwsList();
  if (f.length > 0) {
    writer.writeRepeatedString(16, f);
  }
  f = message.getEmblemWeight();
  if (f !== 0) {
    writer.writeUint64(17, f);
  }
  f = message.getEmblemChainFingerprintRoot();
  if (f.length > 0) {
    writer.writeString(18, f);
  }
  f = message.getEmblemChainAddress();
  if (f.length > 0) {
    writer.writeString(19, f);
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeUint64(20, f);
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(21, f, proto.bc.Transaction.serializeBinaryToWriter);
  }
  f = message.getTxFeeBase();
  if (f !== 0) {
    writer.writeUint64(22, f);
  }
  f = message.getTxDistanceSumLimit();
  if (f !== 0) {
    writer.writeUint64(23, f);
  }
  f = message.getBlockchainHeadersCount();
  if (f !== 0) {
    writer.writeUint64(24, f);
  }
  f = message.getBlockchainHeaders();
  if (f != null) {
    writer.writeMessage(25, f, proto.bc.BlockchainHeaders.serializeBinaryToWriter);
  }
  f = message.getBlockchainFingerprintsRoot();
  if (f.length > 0) {
    writer.writeString(26, f);
  }
};

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string previous_hash = 2;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getPreviousHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setPreviousHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint64 version = 3;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 schema_version = 4;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getSchemaVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setSchemaVersion = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string miner = 6;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getMiner = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setMiner = function (value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string difficulty = 7;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getDifficulty = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 7, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setDifficulty = function (value) {
  jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional uint64 timestamp = 8;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getTimestamp = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 8, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setTimestamp = function (value) {
  jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional string merkle_root = 9;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getMerkleRoot = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 9, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setMerkleRoot = function (value) {
  jspb.Message.setProto3StringField(this, 9, value);
};

/**
 * optional string chain_root = 10;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getChainRoot = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 10, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setChainRoot = function (value) {
  jspb.Message.setProto3StringField(this, 10, value);
};

/**
 * optional string distance = 11;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getDistance = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 11, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setDistance = function (value) {
  jspb.Message.setProto3StringField(this, 11, value);
};

/**
 * optional string total_distance = 12;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getTotalDistance = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 12, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setTotalDistance = function (value) {
  jspb.Message.setProto3StringField(this, 12, value);
};

/**
 * optional string nonce = 13;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getNonce = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 13, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setNonce = function (value) {
  jspb.Message.setProto3StringField(this, 13, value);
};

/**
 * optional uint64 nrg_grant = 14;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getNrgGrant = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 14, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setNrgGrant = function (value) {
  jspb.Message.setProto3IntField(this, 14, value);
};

/**
 * optional uint64 twn = 15;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getTwn = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 15, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setTwn = function (value) {
  jspb.Message.setProto3IntField(this, 15, value);
};

/**
 * repeated string tws = 16;
 * @return {!Array<string>}
 */
proto.bc.BcBlock.prototype.getTwsList = function () {
  return (/** @type {!Array<string>} */jspb.Message.getRepeatedField(this, 16)
  );
};

/** @param {!Array<string>} value */
proto.bc.BcBlock.prototype.setTwsList = function (value) {
  jspb.Message.setField(this, 16, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.bc.BcBlock.prototype.addTws = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};

proto.bc.BcBlock.prototype.clearTwsList = function () {
  this.setTwsList([]);
};

/**
 * optional uint64 emblem_weight = 17;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getEmblemWeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 17, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setEmblemWeight = function (value) {
  jspb.Message.setProto3IntField(this, 17, value);
};

/**
 * optional string emblem_chain_fingerprint_root = 18;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getEmblemChainFingerprintRoot = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 18, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setEmblemChainFingerprintRoot = function (value) {
  jspb.Message.setProto3StringField(this, 18, value);
};

/**
 * optional string emblem_chain_address = 19;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getEmblemChainAddress = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 19, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setEmblemChainAddress = function (value) {
  jspb.Message.setProto3StringField(this, 19, value);
};

/**
 * optional uint64 tx_count = 20;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getTxCount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 20, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setTxCount = function (value) {
  jspb.Message.setProto3IntField(this, 20, value);
};

/**
 * repeated Transaction txs = 21;
 * @return {!Array<!proto.bc.Transaction>}
 */
proto.bc.BcBlock.prototype.getTxsList = function () {
  return (/** @type{!Array<!proto.bc.Transaction>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.Transaction, 21)
  );
};

/** @param {!Array<!proto.bc.Transaction>} value */
proto.bc.BcBlock.prototype.setTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};

/**
 * @param {!proto.bc.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.Transaction}
 */
proto.bc.BcBlock.prototype.addTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.bc.Transaction, opt_index);
};

proto.bc.BcBlock.prototype.clearTxsList = function () {
  this.setTxsList([]);
};

/**
 * optional uint64 tx_fee_base = 22;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getTxFeeBase = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 22, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setTxFeeBase = function (value) {
  jspb.Message.setProto3IntField(this, 22, value);
};

/**
 * optional uint64 tx_distance_sum_limit = 23;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getTxDistanceSumLimit = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 23, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setTxDistanceSumLimit = function (value) {
  jspb.Message.setProto3IntField(this, 23, value);
};

/**
 * optional uint64 blockchain_headers_count = 24;
 * @return {number}
 */
proto.bc.BcBlock.prototype.getBlockchainHeadersCount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 24, 0)
  );
};

/** @param {number} value */
proto.bc.BcBlock.prototype.setBlockchainHeadersCount = function (value) {
  jspb.Message.setProto3IntField(this, 24, value);
};

/**
 * optional BlockchainHeaders blockchain_headers = 25;
 * @return {?proto.bc.BlockchainHeaders}
 */
proto.bc.BcBlock.prototype.getBlockchainHeaders = function () {
  return (/** @type{?proto.bc.BlockchainHeaders} */jspb.Message.getWrapperField(this, proto.bc.BlockchainHeaders, 25)
  );
};

/** @param {?proto.bc.BlockchainHeaders|undefined} value */
proto.bc.BcBlock.prototype.setBlockchainHeaders = function (value) {
  jspb.Message.setWrapperField(this, 25, value);
};

proto.bc.BcBlock.prototype.clearBlockchainHeaders = function () {
  this.setBlockchainHeaders(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.BcBlock.prototype.hasBlockchainHeaders = function () {
  return jspb.Message.getField(this, 25) != null;
};

/**
 * optional string blockchain_fingerprints_root = 26;
 * @return {string}
 */
proto.bc.BcBlock.prototype.getBlockchainFingerprintsRoot = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 26, "")
  );
};

/** @param {string} value */
proto.bc.BcBlock.prototype.setBlockchainFingerprintsRoot = function (value) {
  jspb.Message.setProto3StringField(this, 26, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.OutPoint = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.OutPoint, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.OutPoint.displayName = 'proto.bc.OutPoint';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.OutPoint.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.OutPoint.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.OutPoint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.OutPoint.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      value: msg.getValue_asB64(),
      hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      index: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.OutPoint}
 */
proto.bc.OutPoint.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.OutPoint();
  return proto.bc.OutPoint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.OutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.OutPoint}
 */
proto.bc.OutPoint.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setValue(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint64();
        msg.setIndex(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.OutPoint.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.OutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.OutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.OutPoint.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
};

/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.OutPoint.prototype.getValue = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.OutPoint.prototype.getValue_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getValue())
  );
};

/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.OutPoint.prototype.getValue_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getValue())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.OutPoint.prototype.setValue = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.OutPoint.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.OutPoint.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.bc.OutPoint.prototype.getIndex = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/** @param {number} value */
proto.bc.OutPoint.prototype.setIndex = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.WalletOutPoint = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.WalletOutPoint, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.WalletOutPoint.displayName = 'proto.bc.WalletOutPoint';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.WalletOutPoint.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.WalletOutPoint.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.WalletOutPoint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.WalletOutPoint.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      outpoint: (f = msg.getOutpoint()) && proto.bc.OutPoint.toObject(includeInstance, f),
      callbackScript: msg.getCallbackScript_asB64(),
      originalScript: msg.getOriginalScript_asB64(),
      blockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletOutPoint.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.WalletOutPoint();
  return proto.bc.WalletOutPoint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.WalletOutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletOutPoint.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.bc.OutPoint();
        reader.readMessage(value, proto.bc.OutPoint.deserializeBinaryFromReader);
        msg.setOutpoint(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCallbackScript(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOriginalScript(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setBlockHeight(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.WalletOutPoint.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.WalletOutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.WalletOutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.WalletOutPoint.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(1, f, proto.bc.OutPoint.serializeBinaryToWriter);
  }
  f = message.getCallbackScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getOriginalScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
};

/**
 * optional OutPoint outpoint = 1;
 * @return {?proto.bc.OutPoint}
 */
proto.bc.WalletOutPoint.prototype.getOutpoint = function () {
  return (/** @type{?proto.bc.OutPoint} */jspb.Message.getWrapperField(this, proto.bc.OutPoint, 1)
  );
};

/** @param {?proto.bc.OutPoint|undefined} value */
proto.bc.WalletOutPoint.prototype.setOutpoint = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.bc.WalletOutPoint.prototype.clearOutpoint = function () {
  this.setOutpoint(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.WalletOutPoint.prototype.hasOutpoint = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes callback_script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.WalletOutPoint.prototype.getCallbackScript = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/**
 * optional bytes callback_script = 2;
 * This is a type-conversion wrapper around `getCallbackScript()`
 * @return {string}
 */
proto.bc.WalletOutPoint.prototype.getCallbackScript_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getCallbackScript())
  );
};

/**
 * optional bytes callback_script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCallbackScript()`
 * @return {!Uint8Array}
 */
proto.bc.WalletOutPoint.prototype.getCallbackScript_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCallbackScript())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.WalletOutPoint.prototype.setCallbackScript = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes original_script = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.WalletOutPoint.prototype.getOriginalScript = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/**
 * optional bytes original_script = 3;
 * This is a type-conversion wrapper around `getOriginalScript()`
 * @return {string}
 */
proto.bc.WalletOutPoint.prototype.getOriginalScript_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getOriginalScript())
  );
};

/**
 * optional bytes original_script = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOriginalScript()`
 * @return {!Uint8Array}
 */
proto.bc.WalletOutPoint.prototype.getOriginalScript_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOriginalScript())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.WalletOutPoint.prototype.setOriginalScript = function (value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional uint64 block_height = 4;
 * @return {number}
 */
proto.bc.WalletOutPoint.prototype.getBlockHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/** @param {number} value */
proto.bc.WalletOutPoint.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.WalletData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.WalletData.repeatedFields_, null);
};
goog.inherits(proto.bc.WalletData, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.WalletData.displayName = 'proto.bc.WalletData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.WalletData.repeatedFields_ = [3, 4, 5, 6, 7, 8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.WalletData.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.WalletData.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.WalletData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.WalletData.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
      blockHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      unconfirmedSpendableOutpointsList: jspb.Message.toObjectList(msg.getUnconfirmedSpendableOutpointsList(), proto.bc.WalletOutPoint.toObject, includeInstance),
      spendableOutpointsList: jspb.Message.toObjectList(msg.getSpendableOutpointsList(), proto.bc.WalletOutPoint.toObject, includeInstance),
      collateralizedMakerOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedMakerOutpointsList(), proto.bc.WalletOutPoint.toObject, includeInstance),
      collateralizedUnmatchedOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedUnmatchedOutpointsList(), proto.bc.WalletOutPoint.toObject, includeInstance),
      collateralizedMatchedOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedMatchedOutpointsList(), proto.bc.WalletOutPoint.toObject, includeInstance),
      collateralizedSpendableOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedSpendableOutpointsList(), proto.bc.WalletOutPoint.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.WalletData}
 */
proto.bc.WalletData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.WalletData();
  return proto.bc.WalletData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.WalletData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.WalletData}
 */
proto.bc.WalletData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint64();
        msg.setBlockHeight(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setBlockHash(value);
        break;
      case 3:
        var value = new proto.bc.WalletOutPoint();
        reader.readMessage(value, proto.bc.WalletOutPoint.deserializeBinaryFromReader);
        msg.addUnconfirmedSpendableOutpoints(value);
        break;
      case 4:
        var value = new proto.bc.WalletOutPoint();
        reader.readMessage(value, proto.bc.WalletOutPoint.deserializeBinaryFromReader);
        msg.addSpendableOutpoints(value);
        break;
      case 5:
        var value = new proto.bc.WalletOutPoint();
        reader.readMessage(value, proto.bc.WalletOutPoint.deserializeBinaryFromReader);
        msg.addCollateralizedMakerOutpoints(value);
        break;
      case 6:
        var value = new proto.bc.WalletOutPoint();
        reader.readMessage(value, proto.bc.WalletOutPoint.deserializeBinaryFromReader);
        msg.addCollateralizedUnmatchedOutpoints(value);
        break;
      case 7:
        var value = new proto.bc.WalletOutPoint();
        reader.readMessage(value, proto.bc.WalletOutPoint.deserializeBinaryFromReader);
        msg.addCollateralizedMatchedOutpoints(value);
        break;
      case 8:
        var value = new proto.bc.WalletOutPoint();
        reader.readMessage(value, proto.bc.WalletOutPoint.deserializeBinaryFromReader);
        msg.addCollateralizedSpendableOutpoints(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.WalletData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.WalletData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.WalletData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.WalletData.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUnconfirmedSpendableOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.bc.WalletOutPoint.serializeBinaryToWriter);
  }
  f = message.getSpendableOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.bc.WalletOutPoint.serializeBinaryToWriter);
  }
  f = message.getCollateralizedMakerOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, proto.bc.WalletOutPoint.serializeBinaryToWriter);
  }
  f = message.getCollateralizedUnmatchedOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(6, f, proto.bc.WalletOutPoint.serializeBinaryToWriter);
  }
  f = message.getCollateralizedMatchedOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, proto.bc.WalletOutPoint.serializeBinaryToWriter);
  }
  f = message.getCollateralizedSpendableOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(8, f, proto.bc.WalletOutPoint.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.bc.WalletData.prototype.getBlockHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {number} value */
proto.bc.WalletData.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string block_hash = 2;
 * @return {string}
 */
proto.bc.WalletData.prototype.getBlockHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.WalletData.prototype.setBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated WalletOutPoint unconfirmed_spendable_outpoints = 3;
 * @return {!Array<!proto.bc.WalletOutPoint>}
 */
proto.bc.WalletData.prototype.getUnconfirmedSpendableOutpointsList = function () {
  return (/** @type{!Array<!proto.bc.WalletOutPoint>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.WalletOutPoint, 3)
  );
};

/** @param {!Array<!proto.bc.WalletOutPoint>} value */
proto.bc.WalletData.prototype.setUnconfirmedSpendableOutpointsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.bc.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletData.prototype.addUnconfirmedSpendableOutpoints = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bc.WalletOutPoint, opt_index);
};

proto.bc.WalletData.prototype.clearUnconfirmedSpendableOutpointsList = function () {
  this.setUnconfirmedSpendableOutpointsList([]);
};

/**
 * repeated WalletOutPoint spendable_outpoints = 4;
 * @return {!Array<!proto.bc.WalletOutPoint>}
 */
proto.bc.WalletData.prototype.getSpendableOutpointsList = function () {
  return (/** @type{!Array<!proto.bc.WalletOutPoint>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.WalletOutPoint, 4)
  );
};

/** @param {!Array<!proto.bc.WalletOutPoint>} value */
proto.bc.WalletData.prototype.setSpendableOutpointsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.bc.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletData.prototype.addSpendableOutpoints = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bc.WalletOutPoint, opt_index);
};

proto.bc.WalletData.prototype.clearSpendableOutpointsList = function () {
  this.setSpendableOutpointsList([]);
};

/**
 * repeated WalletOutPoint collateralized_maker_outpoints = 5;
 * @return {!Array<!proto.bc.WalletOutPoint>}
 */
proto.bc.WalletData.prototype.getCollateralizedMakerOutpointsList = function () {
  return (/** @type{!Array<!proto.bc.WalletOutPoint>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.WalletOutPoint, 5)
  );
};

/** @param {!Array<!proto.bc.WalletOutPoint>} value */
proto.bc.WalletData.prototype.setCollateralizedMakerOutpointsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.bc.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletData.prototype.addCollateralizedMakerOutpoints = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bc.WalletOutPoint, opt_index);
};

proto.bc.WalletData.prototype.clearCollateralizedMakerOutpointsList = function () {
  this.setCollateralizedMakerOutpointsList([]);
};

/**
 * repeated WalletOutPoint collateralized_unmatched_outpoints = 6;
 * @return {!Array<!proto.bc.WalletOutPoint>}
 */
proto.bc.WalletData.prototype.getCollateralizedUnmatchedOutpointsList = function () {
  return (/** @type{!Array<!proto.bc.WalletOutPoint>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.WalletOutPoint, 6)
  );
};

/** @param {!Array<!proto.bc.WalletOutPoint>} value */
proto.bc.WalletData.prototype.setCollateralizedUnmatchedOutpointsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.bc.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletData.prototype.addCollateralizedUnmatchedOutpoints = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.bc.WalletOutPoint, opt_index);
};

proto.bc.WalletData.prototype.clearCollateralizedUnmatchedOutpointsList = function () {
  this.setCollateralizedUnmatchedOutpointsList([]);
};

/**
 * repeated WalletOutPoint collateralized_matched_outpoints = 7;
 * @return {!Array<!proto.bc.WalletOutPoint>}
 */
proto.bc.WalletData.prototype.getCollateralizedMatchedOutpointsList = function () {
  return (/** @type{!Array<!proto.bc.WalletOutPoint>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.WalletOutPoint, 7)
  );
};

/** @param {!Array<!proto.bc.WalletOutPoint>} value */
proto.bc.WalletData.prototype.setCollateralizedMatchedOutpointsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!proto.bc.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletData.prototype.addCollateralizedMatchedOutpoints = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.bc.WalletOutPoint, opt_index);
};

proto.bc.WalletData.prototype.clearCollateralizedMatchedOutpointsList = function () {
  this.setCollateralizedMatchedOutpointsList([]);
};

/**
 * repeated WalletOutPoint collateralized_spendable_outpoints = 8;
 * @return {!Array<!proto.bc.WalletOutPoint>}
 */
proto.bc.WalletData.prototype.getCollateralizedSpendableOutpointsList = function () {
  return (/** @type{!Array<!proto.bc.WalletOutPoint>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.WalletOutPoint, 8)
  );
};

/** @param {!Array<!proto.bc.WalletOutPoint>} value */
proto.bc.WalletData.prototype.setCollateralizedSpendableOutpointsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.bc.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.WalletOutPoint}
 */
proto.bc.WalletData.prototype.addCollateralizedSpendableOutpoints = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.WalletOutPoint, opt_index);
};

proto.bc.WalletData.prototype.clearCollateralizedSpendableOutpointsList = function () {
  this.setCollateralizedSpendableOutpointsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.Transaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.Transaction.repeatedFields_, null);
};
goog.inherits(proto.bc.Transaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.Transaction.displayName = 'proto.bc.Transaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.Transaction.repeatedFields_ = [7, 8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.Transaction.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.Transaction.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.Transaction.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
      hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
      overline: jspb.Message.getFieldWithDefault(msg, 4, ""),
      ninCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
      noutCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
      inputsList: jspb.Message.toObjectList(msg.getInputsList(), proto.bc.TransactionInput.toObject, includeInstance),
      outputsList: jspb.Message.toObjectList(msg.getOutputsList(), proto.bc.TransactionOutput.toObject, includeInstance),
      lockTime: jspb.Message.getFieldWithDefault(msg, 9, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.Transaction}
 */
proto.bc.Transaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.Transaction();
  return proto.bc.Transaction.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.Transaction}
 */
proto.bc.Transaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint64();
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setNonce(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      case 4:
        var value = /** @type {string} */reader.readString();
        msg.setOverline(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readUint64();
        msg.setNinCount(value);
        break;
      case 6:
        var value = /** @type {number} */reader.readUint64();
        msg.setNoutCount(value);
        break;
      case 7:
        var value = new proto.bc.TransactionInput();
        reader.readMessage(value, proto.bc.TransactionInput.deserializeBinaryFromReader);
        msg.addInputs(value);
        break;
      case 8:
        var value = new proto.bc.TransactionOutput();
        reader.readMessage(value, proto.bc.TransactionOutput.deserializeBinaryFromReader);
        msg.addOutputs(value);
        break;
      case 9:
        var value = /** @type {number} */reader.readUint32();
        msg.setLockTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.Transaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.Transaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getOverline();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getNinCount();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getNoutCount();
  if (f !== 0) {
    writer.writeUint64(6, f);
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, proto.bc.TransactionInput.serializeBinaryToWriter);
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(8, f, proto.bc.TransactionOutput.serializeBinaryToWriter);
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(9, f);
  }
};

/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.Transaction.prototype.getVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {number} value */
proto.bc.Transaction.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.bc.Transaction.prototype.getNonce = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.Transaction.prototype.setNonce = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string hash = 3;
 * @return {string}
 */
proto.bc.Transaction.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.Transaction.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string overline = 4;
 * @return {string}
 */
proto.bc.Transaction.prototype.getOverline = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/** @param {string} value */
proto.bc.Transaction.prototype.setOverline = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional uint64 nin_count = 5;
 * @return {number}
 */
proto.bc.Transaction.prototype.getNinCount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};

/** @param {number} value */
proto.bc.Transaction.prototype.setNinCount = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint64 nout_count = 6;
 * @return {number}
 */
proto.bc.Transaction.prototype.getNoutCount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0)
  );
};

/** @param {number} value */
proto.bc.Transaction.prototype.setNoutCount = function (value) {
  jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * repeated TransactionInput inputs = 7;
 * @return {!Array<!proto.bc.TransactionInput>}
 */
proto.bc.Transaction.prototype.getInputsList = function () {
  return (/** @type{!Array<!proto.bc.TransactionInput>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.TransactionInput, 7)
  );
};

/** @param {!Array<!proto.bc.TransactionInput>} value */
proto.bc.Transaction.prototype.setInputsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!proto.bc.TransactionInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.TransactionInput}
 */
proto.bc.Transaction.prototype.addInputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.bc.TransactionInput, opt_index);
};

proto.bc.Transaction.prototype.clearInputsList = function () {
  this.setInputsList([]);
};

/**
 * repeated TransactionOutput outputs = 8;
 * @return {!Array<!proto.bc.TransactionOutput>}
 */
proto.bc.Transaction.prototype.getOutputsList = function () {
  return (/** @type{!Array<!proto.bc.TransactionOutput>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.TransactionOutput, 8)
  );
};

/** @param {!Array<!proto.bc.TransactionOutput>} value */
proto.bc.Transaction.prototype.setOutputsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.bc.TransactionOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.TransactionOutput}
 */
proto.bc.Transaction.prototype.addOutputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.TransactionOutput, opt_index);
};

proto.bc.Transaction.prototype.clearOutputsList = function () {
  this.setOutputsList([]);
};

/**
 * optional uint32 lock_time = 9;
 * @return {number}
 */
proto.bc.Transaction.prototype.getLockTime = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 9, 0)
  );
};

/** @param {number} value */
proto.bc.Transaction.prototype.setLockTime = function (value) {
  jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.UnspentTransactions = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.UnspentTransactions.repeatedFields_, null);
};
goog.inherits(proto.bc.UnspentTransactions, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.UnspentTransactions.displayName = 'proto.bc.UnspentTransactions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.UnspentTransactions.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.UnspentTransactions.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.UnspentTransactions.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.UnspentTransactions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.UnspentTransactions.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      utxoList: jspb.Message.getRepeatedField(msg, 1)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.UnspentTransactions}
 */
proto.bc.UnspentTransactions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.UnspentTransactions();
  return proto.bc.UnspentTransactions.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.UnspentTransactions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.UnspentTransactions}
 */
proto.bc.UnspentTransactions.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.addUtxo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.UnspentTransactions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.UnspentTransactions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.UnspentTransactions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.UnspentTransactions.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUtxoList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};

/**
 * repeated string utxo = 1;
 * @return {!Array<string>}
 */
proto.bc.UnspentTransactions.prototype.getUtxoList = function () {
  return (/** @type {!Array<string>} */jspb.Message.getRepeatedField(this, 1)
  );
};

/** @param {!Array<string>} value */
proto.bc.UnspentTransactions.prototype.setUtxoList = function (value) {
  jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.bc.UnspentTransactions.prototype.addUtxo = function (value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.bc.UnspentTransactions.prototype.clearUtxoList = function () {
  this.setUtxoList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.TransactionInput = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.TransactionInput, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.TransactionInput.displayName = 'proto.bc.TransactionInput';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.TransactionInput.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.TransactionInput.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.TransactionInput} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.TransactionInput.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      outPoint: (f = msg.getOutPoint()) && proto.bc.OutPoint.toObject(includeInstance, f),
      scriptLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
      inputScript: msg.getInputScript_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.TransactionInput}
 */
proto.bc.TransactionInput.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.TransactionInput();
  return proto.bc.TransactionInput.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.TransactionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.TransactionInput}
 */
proto.bc.TransactionInput.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.bc.OutPoint();
        reader.readMessage(value, proto.bc.OutPoint.deserializeBinaryFromReader);
        msg.setOutPoint(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readUint32();
        msg.setScriptLength(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setInputScript(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.TransactionInput.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.TransactionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.TransactionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.TransactionInput.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOutPoint();
  if (f != null) {
    writer.writeMessage(1, f, proto.bc.OutPoint.serializeBinaryToWriter);
  }
  f = message.getScriptLength();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getInputScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * optional OutPoint out_point = 1;
 * @return {?proto.bc.OutPoint}
 */
proto.bc.TransactionInput.prototype.getOutPoint = function () {
  return (/** @type{?proto.bc.OutPoint} */jspb.Message.getWrapperField(this, proto.bc.OutPoint, 1)
  );
};

/** @param {?proto.bc.OutPoint|undefined} value */
proto.bc.TransactionInput.prototype.setOutPoint = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.bc.TransactionInput.prototype.clearOutPoint = function () {
  this.setOutPoint(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.TransactionInput.prototype.hasOutPoint = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint32 script_length = 2;
 * @return {number}
 */
proto.bc.TransactionInput.prototype.getScriptLength = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};

/** @param {number} value */
proto.bc.TransactionInput.prototype.setScriptLength = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes input_script = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.TransactionInput.prototype.getInputScript = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/**
 * optional bytes input_script = 3;
 * This is a type-conversion wrapper around `getInputScript()`
 * @return {string}
 */
proto.bc.TransactionInput.prototype.getInputScript_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getInputScript())
  );
};

/**
 * optional bytes input_script = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputScript()`
 * @return {!Uint8Array}
 */
proto.bc.TransactionInput.prototype.getInputScript_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getInputScript())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.TransactionInput.prototype.setInputScript = function (value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.Utxo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.Utxo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.Utxo.displayName = 'proto.bc.Utxo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.Utxo.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.Utxo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.Utxo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.Utxo.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      output: (f = msg.getOutput()) && proto.bc.TransactionOutput.toObject(includeInstance, f),
      txHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      txIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
      blockHash: jspb.Message.getFieldWithDefault(msg, 4, ""),
      blockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
      coinbase: jspb.Message.getFieldWithDefault(msg, 6, false)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.Utxo}
 */
proto.bc.Utxo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.Utxo();
  return proto.bc.Utxo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.Utxo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.Utxo}
 */
proto.bc.Utxo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.bc.TransactionOutput();
        reader.readMessage(value, proto.bc.TransactionOutput.deserializeBinaryFromReader);
        msg.setOutput(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setTxHash(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint64();
        msg.setTxIndex(value);
        break;
      case 4:
        var value = /** @type {string} */reader.readString();
        msg.setBlockHash(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readUint64();
        msg.setBlockHeight(value);
        break;
      case 6:
        var value = /** @type {boolean} */reader.readBool();
        msg.setCoinbase(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.Utxo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.Utxo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.Utxo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.Utxo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(1, f, proto.bc.TransactionOutput.serializeBinaryToWriter);
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getCoinbase();
  if (f) {
    writer.writeBool(6, f);
  }
};

/**
 * optional TransactionOutput output = 1;
 * @return {?proto.bc.TransactionOutput}
 */
proto.bc.Utxo.prototype.getOutput = function () {
  return (/** @type{?proto.bc.TransactionOutput} */jspb.Message.getWrapperField(this, proto.bc.TransactionOutput, 1)
  );
};

/** @param {?proto.bc.TransactionOutput|undefined} value */
proto.bc.Utxo.prototype.setOutput = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.bc.Utxo.prototype.clearOutput = function () {
  this.setOutput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.Utxo.prototype.hasOutput = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.bc.Utxo.prototype.getTxHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.Utxo.prototype.setTxHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint64 tx_index = 3;
 * @return {number}
 */
proto.bc.Utxo.prototype.getTxIndex = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/** @param {number} value */
proto.bc.Utxo.prototype.setTxIndex = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string block_hash = 4;
 * @return {string}
 */
proto.bc.Utxo.prototype.getBlockHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/** @param {string} value */
proto.bc.Utxo.prototype.setBlockHash = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional uint64 block_height = 5;
 * @return {number}
 */
proto.bc.Utxo.prototype.getBlockHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};

/** @param {number} value */
proto.bc.Utxo.prototype.setBlockHeight = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional bool coinbase = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bc.Utxo.prototype.getCoinbase = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 6, false)
  );
};

/** @param {boolean} value */
proto.bc.Utxo.prototype.setCoinbase = function (value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.TransactionOutput = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.TransactionOutput, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.TransactionOutput.displayName = 'proto.bc.TransactionOutput';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.TransactionOutput.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.TransactionOutput.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.TransactionOutput} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.TransactionOutput.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      value: msg.getValue_asB64(),
      unit: msg.getUnit_asB64(),
      scriptLength: jspb.Message.getFieldWithDefault(msg, 3, 0),
      outputScript: msg.getOutputScript_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.TransactionOutput}
 */
proto.bc.TransactionOutput.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.TransactionOutput();
  return proto.bc.TransactionOutput.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.TransactionOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.TransactionOutput}
 */
proto.bc.TransactionOutput.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setValue(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setUnit(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint32();
        msg.setScriptLength(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOutputScript(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.TransactionOutput.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.TransactionOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.TransactionOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.TransactionOutput.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getUnit_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getScriptLength();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getOutputScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.TransactionOutput.prototype.getValue = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.TransactionOutput.prototype.getValue_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getValue())
  );
};

/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.TransactionOutput.prototype.getValue_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getValue())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.TransactionOutput.prototype.setValue = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes unit = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.TransactionOutput.prototype.getUnit = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/**
 * optional bytes unit = 2;
 * This is a type-conversion wrapper around `getUnit()`
 * @return {string}
 */
proto.bc.TransactionOutput.prototype.getUnit_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getUnit())
  );
};

/**
 * optional bytes unit = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnit()`
 * @return {!Uint8Array}
 */
proto.bc.TransactionOutput.prototype.getUnit_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getUnit())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.TransactionOutput.prototype.setUnit = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional uint32 script_length = 3;
 * @return {number}
 */
proto.bc.TransactionOutput.prototype.getScriptLength = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/** @param {number} value */
proto.bc.TransactionOutput.prototype.setScriptLength = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes output_script = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bc.TransactionOutput.prototype.getOutputScript = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/**
 * optional bytes output_script = 4;
 * This is a type-conversion wrapper around `getOutputScript()`
 * @return {string}
 */
proto.bc.TransactionOutput.prototype.getOutputScript_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getOutputScript())
  );
};

/**
 * optional bytes output_script = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputScript()`
 * @return {!Uint8Array}
 */
proto.bc.TransactionOutput.prototype.getOutputScript_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOutputScript())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.TransactionOutput.prototype.setOutputScript = function (value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.BlockchainHeader = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.BlockchainHeader.repeatedFields_, null);
};
goog.inherits(proto.bc.BlockchainHeader, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.BlockchainHeader.displayName = 'proto.bc.BlockchainHeader';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.BlockchainHeader.repeatedFields_ = [8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.BlockchainHeader.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.BlockchainHeader.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.BlockchainHeader} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.BlockchainHeader.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
      hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
      previousHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
      timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
      height: jspb.Message.getFieldWithDefault(msg, 5, 0),
      merkleRoot: jspb.Message.getFieldWithDefault(msg, 6, ""),
      blockchainConfirmationsInParentCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
      markedTxsList: jspb.Message.toObjectList(msg.getMarkedTxsList(), proto.bc.MarkedTransaction.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.BlockchainHeader}
 */
proto.bc.BlockchainHeader.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.BlockchainHeader();
  return proto.bc.BlockchainHeader.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.BlockchainHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.BlockchainHeader}
 */
proto.bc.BlockchainHeader.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setBlockchain(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setHash(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setPreviousHash(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setTimestamp(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readUint64();
        msg.setHeight(value);
        break;
      case 6:
        var value = /** @type {string} */reader.readString();
        msg.setMerkleRoot(value);
        break;
      case 7:
        var value = /** @type {number} */reader.readUint64();
        msg.setBlockchainConfirmationsInParentCount(value);
        break;
      case 8:
        var value = new proto.bc.MarkedTransaction();
        reader.readMessage(value, proto.bc.MarkedTransaction.deserializeBinaryFromReader);
        msg.addMarkedTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.BlockchainHeader.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.BlockchainHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.BlockchainHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.BlockchainHeader.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getBlockchainConfirmationsInParentCount();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getMarkedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(8, f, proto.bc.MarkedTransaction.serializeBinaryToWriter);
  }
};

/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.BlockchainHeader.prototype.getBlockchain = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/** @param {string} value */
proto.bc.BlockchainHeader.prototype.setBlockchain = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.BlockchainHeader.prototype.getHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.BlockchainHeader.prototype.setHash = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string previous_hash = 3;
 * @return {string}
 */
proto.bc.BlockchainHeader.prototype.getPreviousHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.BlockchainHeader.prototype.setPreviousHash = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.bc.BlockchainHeader.prototype.getTimestamp = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/** @param {number} value */
proto.bc.BlockchainHeader.prototype.setTimestamp = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.BlockchainHeader.prototype.getHeight = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};

/** @param {number} value */
proto.bc.BlockchainHeader.prototype.setHeight = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string merkle_root = 6;
 * @return {string}
 */
proto.bc.BlockchainHeader.prototype.getMerkleRoot = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 6, "")
  );
};

/** @param {string} value */
proto.bc.BlockchainHeader.prototype.setMerkleRoot = function (value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional uint64 blockchain_confirmations_in_parent_count = 7;
 * @return {number}
 */
proto.bc.BlockchainHeader.prototype.getBlockchainConfirmationsInParentCount = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};

/** @param {number} value */
proto.bc.BlockchainHeader.prototype.setBlockchainConfirmationsInParentCount = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * repeated MarkedTransaction marked_txs = 8;
 * @return {!Array<!proto.bc.MarkedTransaction>}
 */
proto.bc.BlockchainHeader.prototype.getMarkedTxsList = function () {
  return (/** @type{!Array<!proto.bc.MarkedTransaction>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.MarkedTransaction, 8)
  );
};

/** @param {!Array<!proto.bc.MarkedTransaction>} value */
proto.bc.BlockchainHeader.prototype.setMarkedTxsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.bc.MarkedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.MarkedTransaction}
 */
proto.bc.BlockchainHeader.prototype.addMarkedTxs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.MarkedTransaction, opt_index);
};

proto.bc.BlockchainHeader.prototype.clearMarkedTxsList = function () {
  this.setMarkedTxsList([]);
};

goog.object.extend(exports, proto.bc);