export declare enum ContractParamType {
    Signature = 0,
    Boolean = 1,
    Integer = 2,
    Hash160 = 3,
    Hash256 = 4,
    ByteArray = 5,
    PublicKey = 6,
    String = 7,
    Array = 16,
    InteropInterface = 240,
    Void = 255
}
export interface ContractParamLike {
    type: string;
    value: any;
}
/**
 * Contract input parameters.
 * These are mainly used as parameters to pass in for RPC test invokes.
 */
export declare class ContractParam {
    /**
     * Creates a String ContractParam.
     */
    static string(value: string): ContractParam;
    /**
     * Creates a Boolean ContractParam. Does basic checks to convert value into a boolean.
     */
    static boolean(value: any): ContractParam;
    /**
     * Creates a Hash160 ContractParam. This is used for containing a scriptHash. Do not reverse the input if using this format.
     * @param {string} value - A 40 character long hexstring. Automatically converts an address to scripthash if provided.
     * @return {ContractParam}
     */
    static hash160(value: string): ContractParam;
    /**
     * Creates an Integer ContractParam. This is converted into an BigInteger in NeoVM.
     * @param {string | number } value - A value that can be parsed to an BigInteger. Numbers or numeric strings are accepted.
     * @example
     * ContractParam.integer(128)
     * ContractParam.integer("128")
     */
    static integer(value: string | number): ContractParam;
    /**
     * Creates a ByteArray ContractParam.
     * @param value
     * @param format The format that this value represents. Different formats are parsed differently.
     * @param args Additional arguments such as decimal precision
     */
    static byteArray(value: any, format: string, ...args: any[]): ContractParam;
    /**
     * Creates an Array ContractParam.
     * @param params params to be encapsulated in an array.
     */
    static array(...params: ContractParam[]): ContractParam;
    type: ContractParamType;
    value: any;
    constructor(type: ContractParam | ContractParamLike | ContractParamType | keyof typeof ContractParamType | number, value?: any);
    get [Symbol.toStringTag](): string;
    export(): ContractParamLike;
    equal(other: ContractParamLike): boolean;
}
export default ContractParam;
export declare function likeContractParam(cp: Partial<ContractParam>): boolean;
//# sourceMappingURL=ContractParam.d.ts.map