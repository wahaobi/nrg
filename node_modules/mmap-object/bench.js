//const memwatch = require('memwatch-next')
const temp = require('temp')
const MmapObject = require('.')
const assert = require('assert')
const path = require('path')

//memwatch.on('leak', function (info) { console.log(info) })

temp.track()
//const tempDir = temp.mkdirSync('node-shared-benchmark')
const tempDir = "/tmp/x"

function runHarness (what, times, run) {
  let elapsed = 0
  const start = process.hrtime()
  for (let i = 0; i < times; i++) {
    run(i)
  }
  const done = process.hrtime(start)
  elapsed += done[0] * 1000000 + done[1] / 1000
  //console.log(`${what}, ${times} ops: ${(elapsed / 1000).toFixed(2)} ms`)
  return elapsed / 1000
}

function stringWrites (times) {
  const o = new MmapObject.Create(path.join(tempDir, 'mmap-bench-stringOps'), 5421801072, times)
  const r = runHarness('string writes', times, function (i) {
    const myStr = new Array(100).join('A bunch of strings') + `${i}`
    const myKey = `${i} rot`
    o[myKey] = myStr
  })
  o.close()
  return r
}

function stringReads (times) {
  const o = new MmapObject.Open(path.join(tempDir, 'mmap-bench-stringOps'))
  const r = runHarness('string reads', times, function (i) {
    //const myStr = new Array(100).join('A bunch of strings') + `${i}`
    const myKey = `${i} rot`
    assert(o[myKey].length > 3)
//    assert.equal(o[myKey], myStr)
  })
  o.close()
  return r
}

function bufferWrites (times) {
  const o = new MmapObject.Create(path.join(tempDir, 'mmap-bench-bufferOps'), 5421801072, times)
  runHarness('buffer writes', times, function (i) {
    const myStr = new Array(100).join('A bunch of strings') + `${i}`
    const myBuf = Buffer.from(myStr)
    const myKey = `${i} rot`
    o[myKey] = myBuf
  })
  o.close()
}

function bufferReads (times) {
  const o = new MmapObject.Open(path.join(tempDir, 'mmap-bench-bufferOps'))
  const r = runHarness('buffer reads', times, function (i) {
    //const myStr = new Array(100).join('A bunch of strings') + `${i}`
    const myKey = `${i} rot`
    assert(o[myKey].length > 3)
  })
  o.close()
  return r
}

const OPS = 100000
//stringWrites(OPS)
const strs  = stringReads(OPS)
//bufferWrites(OPS)
const bufs = bufferReads(OPS)

const p = strs/bufs * 100
console.log(`str ${strs.toFixed(2)} ms, buf ${bufs.toFixed(2)} ms, diff ${p.toFixed(2)}`)
