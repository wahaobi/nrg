"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = require("./Path");
var TYPES = {
    string: '[object String]',
    number: '[object Number]',
    boolean: '[object Boolean]',
    object: '[object Object]',
    array: '[object Array]'
};
var toString = Object.prototype.toString;
exports.DEFAULT_NUMBER_SEPARATOR = ',';
function isObject(param) {
    return toString.call(param) === TYPES.object;
}
exports.isObject = isObject;
function isEmpty(param) {
    return param == null;
}
exports.isEmpty = isEmpty;
function isNotEmpty(param) {
    return param != null;
}
exports.isNotEmpty = isNotEmpty;
function isString(param) {
    return toString.call(param) === TYPES.string;
}
exports.isString = isString;
function isNumber(param) {
    return toString.call(param) === TYPES.number;
}
exports.isNumber = isNumber;
function isArray(param) {
    return toString.call(param) === TYPES.array;
}
exports.isArray = isArray;
function isBoolean(param) {
    return toString.call(param) === TYPES.boolean;
}
exports.isBoolean = isBoolean;
function isNull(param) {
    return param === null;
}
exports.isNull = isNull;
function isUndefined(param) {
    return param === undefined;
}
exports.isUndefined = isUndefined;
function isNaNCheck(param) {
    return isNumber(param) && isNaN(param);
}
exports.isNaNCheck = isNaNCheck;
function isFunction(param) {
    return typeof param === 'function';
}
exports.isFunction = isFunction;
function typeOf(param) {
    var type = typeof param;
    switch (type) {
        case 'object':
            if (param === null) {
                return 'null';
            }
            else {
                var checkList = [
                    { check: isArray, type: 'array' },
                    { check: isObject, type: 'object' },
                    { check: isString, type: 'string' },
                    { check: isNumber, type: 'number' },
                    { check: isBoolean, type: 'boolean' }
                ];
                var $type_1 = 'null';
                checkList.some(function (item) {
                    if (item.check(param)) {
                        $type_1 = item.type;
                    }
                    return $type_1 !== 'null';
                });
                return $type_1;
            }
        default:
            return type;
    }
}
exports.typeOf = typeOf;
function numToLength(num, length) {
    var str = String(num);
    for (var i = str.length; i < length; i++) {
        str = '0' + str;
    }
    return str;
}
exports.numToLength = numToLength;
function round(num, len) {
    len = len || 2;
    return Number(Math.round(Number(num + 'e' + len)) + 'e-' + len);
}
exports.round = round;
function splitRange(num, separator, processor) {
    separator = isEmpty(separator) ? exports.DEFAULT_NUMBER_SEPARATOR : separator;
    if (processor) {
        num = processor(num);
    }
    var str = String(num);
    var numData = str.split('.');
    var integral = numData[0], fractional = numData[1];
    integral = integral.split('').reverse().join('');
    integral = integral.replace(/(\d{3})/g, "$1" + separator)
        .split('').reverse().join('').trim();
    if (fractional) {
        return integral + "." + fractional;
    }
    return integral;
}
exports.splitRange = splitRange;
function each(param, callback, context) {
    if (typeof param !== 'object' || !param) {
        return null;
    }
    if (context) {
        return Array.isArray(param) ? param.forEach(callback, context) :
            Object.keys(param).forEach(function (key) { return callback.call(context, param[key], key); });
    }
    else {
        return Array.isArray(param) ? param.forEach(callback) :
            Object.keys(param).forEach(function (key) { return callback(param[key], key); });
    }
}
exports.each = each;
function some(param, callback) {
    return Object.keys(param).some(function (key) { return callback(param[key], key); });
}
exports.some = some;
function get(data, path) {
    var tmp = data;
    var parts = isString(path) ? Path_1.Path.parse(path) : path;
    parts.some(function (item) {
        if (typeof tmp === 'object' && tmp !== null && (item.name in tmp)) {
            tmp = tmp[item.name];
        }
        else {
            tmp = null;
            return true;
        }
    });
    return tmp;
}
exports.get = get;
function set(data, path, value) {
    var tmp = data;
    var parts = isString(path) ? Path_1.Path.parse(path) : path;
    parts.forEach(function (itemData, index) {
        var isLast = index === parts.length - 1;
        if (isLast) {
            tmp[itemData.name] = value;
        }
        else {
            if (typeof tmp[itemData.name] !== 'object') {
                tmp[itemData.name] = itemData.nextContainer;
            }
            tmp = tmp[itemData.name];
        }
    });
}
exports.set = set;
function getLayers(data, path) {
    var tmp = data;
    var layers = [{ name: null, data: data, parent: null }];
    var parts = isString(path) ? Path_1.Path.parse(path) : path;
    parts.forEach(function (item) {
        if (tmp) {
            layers.push({ name: item.name, data: tmp[item.name], parent: tmp });
            tmp = tmp[item.name];
        }
        else {
            layers = null;
        }
    });
    return layers;
}
exports.getLayers = getLayers;
function unset(data, path) {
    (getLayers(data, path) || []).reverse().some(function (item, index) {
        if (index === 0) {
            if (item.parent) {
                delete item.parent[item.name];
            }
        }
        else {
            if (item.parent && Object.keys(item.data).length === 0) {
                delete item.parent[item.name];
            }
        }
    });
}
exports.unset = unset;
var counter = 0;
function uniqueId(prefix) {
    if (prefix === void 0) { prefix = ''; }
    return "" + prefix + counter++;
}
exports.uniqueId = uniqueId;
function result(param) {
    if (isFunction(param)) {
        return param();
    }
    else {
        return param;
    }
}
exports.result = result;
function getPaths(param) {
    var paths = [];
    function getIterate(parents, array) {
        var iterate = function (value, key) {
            var newLine = parents.slice();
            newLine.push({ type: array ? 1 : 0, name: key });
            if (isObject(value)) {
                each(value, getIterate(newLine));
            }
            else if (isArray(value)) {
                each(value, getIterate(newLine, true));
            }
            else {
                paths.push(newLine);
            }
        };
        return iterate;
    }
    var firstLine = [];
    each(param, getIterate(firstLine, isArray(param)));
    return paths.map(function (pathParts) { return new Path_1.Path(pathParts); });
}
exports.getPaths = getPaths;
function clone(data) {
    switch (typeof data) {
        case 'object':
            if (data === null) {
                return null;
            }
            if (Array.isArray(data)) {
                return data.slice();
            }
            else {
                return __assign({}, data);
            }
        default:
            return data;
    }
}
exports.clone = clone;
function cloneDeep(data) {
    switch (typeof data) {
        case 'object':
            var paths = getPaths(data);
            var $clone_1 = isArray(data) ? [] : Object.create(null);
            paths.forEach(function (path) {
                var value = get(data, path);
                set($clone_1, path, value);
            });
            return $clone_1;
        default:
            return data;
    }
}
exports.cloneDeep = cloneDeep;
function merge(origin) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    args.forEach(function (part) {
        var paths = getPaths(part);
        paths.forEach(function (path) {
            var value = get(part, path);
            set(origin, path, value);
        });
    });
    return origin;
}
exports.merge = merge;
function defaults(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var paths = getPaths(target).map(String);
    args.reverse().forEach(function (item) {
        var itemPaths = getPaths(item);
        itemPaths.forEach(function (path) {
            var stringPath = path.toString();
            if (paths.indexOf(stringPath) === -1) {
                paths.push(stringPath);
                set(target, path, get(item, path));
            }
        });
    });
    return target;
}
exports.defaults = defaults;
function camelCase(text) {
    return text.split(/\W|_/).map(function (item, index) {
        switch (index) {
            case 0:
                return item;
            default:
                return item.charAt(0).toUpperCase() + item.substr(1);
        }
    }).join('');
}
exports.camelCase = camelCase;
//# sourceMappingURL=utils.js.map