"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts_utils_1 = require("ts-utils");
var BasePart = /** @class */ (function () {
    function BasePart(options, path) {
        this.options = options;
        this.path = path;
        if (this.options.isEmpty) {
            this.isEmpty = this.options.isEmpty;
        }
        if (this.options.isValid) {
            this.isValid = this.options.isValid;
        }
        if (this.options.required && ('defaultValue' in this.options)) {
            throw new Error('Wrong params! Conflict options "required" and defaultValue');
        }
    }
    BasePart.prototype.process = function (data, roots) {
        var _this = this;
        var path = this.getPath();
        var result = this.getValue(this.getDataByPath(data, path), roots);
        return BasePart.toPromise(result).then(function (value) {
            var isEmpty = _this.isEmpty(value);
            var isValid = _this.isValid(value);
            var type = _this.options.type.name || _this.options.type.prototype.constructor.name;
            if (_this.options.required) {
                if (isEmpty) {
                    throw new Error("Required field type \"" + type + "\" \"" + path + "\" is empty!");
                }
            }
            if (('defaultValue' in _this.options) && isEmpty) {
                value = _this.options.defaultValue;
            }
            else {
                if (!isValid) {
                    throw new Error("Field \"" + path + "\" is invalid!");
                }
            }
            return value;
        });
    };
    BasePart.prototype.getPath = function () {
        return this.options.path === null ? null : this.options.path || this.path;
    };
    BasePart.prototype.isEmpty = function (data) {
        return data == null;
    };
    BasePart.prototype.isValid = function (data) {
        return true;
    };
    BasePart.prototype.getDataByPath = function (data, path) {
        if (this.options.parseValue) {
            if (path) {
                return this.options.parseValue(ts_utils_1.get(data, path));
            }
            else {
                return this.options.parseValue(data);
            }
        }
        else if (path != null) {
            return ts_utils_1.get(data, path);
        }
        else {
            return data;
        }
    };
    BasePart.isPromise = function (some) {
        return some && some.then && typeof some.then === 'function';
    };
    BasePart.toPromise = function (some) {
        return BasePart.isPromise(some) ? some : Promise.resolve(some);
    };
    return BasePart;
}());
exports.BasePart = BasePart;
//# sourceMappingURL=BasePart.js.map