"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BasePart_1 = require("./BasePart");
var ts_utils_1 = require("ts-utils");
var ObjectPart = /** @class */ (function (_super) {
    __extends(ObjectPart, _super);
    function ObjectPart(config, path) {
        var _this = _super.call(this, config, path) || this;
        var myPath = _this.getPath();
        _this._childHash = Object.create(null);
        ts_utils_1.each(_this.options.content, function (config, key) {
            var Component = config.type;
            var localPath = path == null ? String(key) : myPath + "." + key;
            _this._childHash[key] = new Component(config, localPath);
        });
        return _this;
    }
    ObjectPart.prototype.process = function (data, rootList) {
        var _this = this;
        return _super.prototype.process.call(this, data, rootList).then(function (value) {
            if (value && ts_utils_1.isObject(value)) {
                var promises_1 = [];
                var result_1 = Object.create(null);
                Object.keys(_this._childHash).forEach(function (name) {
                    var promise = _this._childHash[name].process(data, rootList).then(function (itemValue) {
                        result_1[name] = itemValue;
                    });
                    promises_1.push(promise);
                });
                return Promise.all(promises_1).then(function () { return result_1; });
            }
            else {
                return value;
            }
        });
    };
    ObjectPart.prototype.getValue = function (data) {
        if (ts_utils_1.isObject(data)) {
            return data;
        }
        else {
            return null;
        }
    };
    return ObjectPart;
}(BasePart_1.BasePart));
exports.ObjectPart = ObjectPart;
//# sourceMappingURL=ObjectPart.js.map