import { Path } from './Path';
import { IFilter } from './filters';
export declare let DEFAULT_NUMBER_SEPARATOR: string;
/**
 * Check the parameter type
 * Is the parameter an object
 * @param param
 * @returns {boolean}
 */
export declare function isObject(param: any): boolean;
/**
 * Check the parameter
 * Whether the parameter is null or undefined
 * @param param
 * @returns {boolean}
 */
export declare function isEmpty(param: any): boolean;
/**
 * Check the parameter
 * Whether the parameter is not null or is not undefined
 * @param param
 * @returns {boolean}
 */
export declare function isNotEmpty(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an string
 * @param param
 * @returns {boolean}
 */
export declare function isString(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an number
 * @param param
 * @returns {boolean}
 */
export declare function isNumber(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an array
 * @param param
 * @returns {boolean}
 */
export declare function isArray(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an boolean
 * @param param
 * @returns {boolean}
 */
export declare function isBoolean(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an null
 * @param param
 * @returns {boolean}
 */
export declare function isNull(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an undefined
 * @param param
 * @returns {boolean}
 */
export declare function isUndefined(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an NaN
 * @param param
 * @returns {boolean}
 */
export declare function isNaNCheck(param: any): boolean;
/**
 * Check the parameter type
 * Is the parameter an function
 * @param param
 * @returns {boolean}
 */
export declare function isFunction(param: any): boolean;
/**
 *
 * @param param
 * @returns {TTypes}
 */
export declare function typeOf(param: any): TTypes;
/**
 * Give the number to a certain number of symbols
 *
 * @example
 * numToLength(22, 3) // returns '022'
 * @example
 * numToLength(new Date().getHours(), 2) //returns '06'
 *
 * @param {number} num
 * @param {number} length
 * @returns {string}
 */
export declare function numToLength(num: number, length: number): string;
/**
 * Safely rounds a number to a character
 * @param {number} num
 * @param {number} len
 * @returns {number}
 */
export declare function round(num: number, len?: number): number;
/**
 * Format a number
 *
 * @example
 * splitRange(21257.32, {separator: ','}) // returns '21 257,32'
 *
 * @example
 * splitRange(21257.322, {separator: ','}, (num) => round(num, 2)) // returns '21 257,32'
 *
 * @param {number} num
 * @param {ISplitRangeOptions} options format options
 * @param {IFilter<number, number>} processor function for preprocess param
 * @returns {string}
 */
export declare function splitRange(num: number, options?: ISplitRangeOptions, processor?: IFilter<any, number>): string;
/**
 * A generic iterator function, which can be used to seamlessly iterate over objects.
 * Like forEach for array
 * @param {Array<T> | IHash<T>} param
 * @param {(data: T, key: (string | number))} callback
 * @param context
 */
export declare function each<T>(param: Array<T> | IHash<T>, callback: (data: T, key: string | number) => any, context?: any): void;
/**
 * The general iterator function that can be used to test a particular property.
 * Like some for array
 * @param {Object} param
 * @param {ISomeCallback<T>} callback
 * @returns {boolean}
 */
export declare function some<T>(param: Object, callback: ISomeCallback<T>): boolean;
/**
 * Get some data from object by string path
 *
 * @example
 * get({a: {b: 1}}), 'a.b') // returns 1
 *
 * @param {Object} data
 * @param {string} path
 * @returns {T}
 */
export declare function get<T>(data: object, path: string | Path): T;
/**
 * Set some data to object by string path
 *
 * @example
 * var some = {};
 * set(some), 'a.b', 1) // some equal {a: {b: 1}}
 *
 * @param {Object} data
 * @param {string} path
 * @param value
 */
export declare function set(data: object, path: string | Path, value: any): void;
export declare function getLayers(data: object, path: string | Path): Array<{
    name: string;
    data: any;
    parent: object;
}>;
export declare function unset(data: object, path: string | Path): void;
export declare function uniqueId(prefix?: string): string;
export declare function result(param: any): any;
/**
 * Get array all path from object
 *
 * @example
 * getPaths({a: {b: 1, c: 2}, d: 1}) // return [['a', 'b'], ['a', 'c'], ['d']]
 *
 * @param {Object} param
 * @returns {Array<Array<string>>}
 */
export declare function getPaths(param: object): Array<Path>;
export declare function clone<T>(data: T): T;
export declare function cloneDeep<T>(data: T): T;
export declare function merge<T>(origin: Partial<T>, ...args: Array<Partial<T>>): Partial<T>;
export declare function defaults<T extends object>(target: Partial<T>, ...args: Array<Partial<T>>): Partial<T>;
export declare function camelCase(text: string): string;
export interface ISplitRangeOptions {
    nbsp?: boolean;
    separator?: string;
}
export interface ISomeCallback<T> {
    (data?: T, key?: string): boolean;
}
export interface IHash<T> {
    [key: string]: T;
}
export declare type TTypes = 'string' | 'number' | 'object' | 'function' | 'array' | 'null' | 'undefined' | 'boolean';
